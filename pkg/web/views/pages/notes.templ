package pages

import (
"github.com/Paintersrp/zettel/pkg/web/views/layouts/base"
"github.com/Paintersrp/zettel/pkg/web/views/components/icons"
"github.com/yuin/goldmark"
"github.com/yuin/goldmark/extension"
"github.com/yuin/goldmark/renderer/html"
"time"
"github.com/Paintersrp/zettel/pkg/api/notes"
)

templ Notes(notes []notes.NoteWithDetails) {
@base.Layout() {
<div class="pb-4">
  <h1 class="text-3xl font-bold mb-2">Your Notes</h1>
  <div class="grid gap-3 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
    for _, note := range notes {
    <div class="bg-contrast rounded shadow-md overflow-hidden">
      <div class="p-4">
        <div class="flex items-center mb-1">
          <svg class="size-4 mr-1 text-primary " xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
            fill="currentColor">
            <path fill-rule="evenodd"
              d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
              clip-rule="evenodd"></path>
          </svg>
          <span class="text-[0.8rem]">{ time.Time(note.UpdatedAt.Time).Format("Jan 2, 2006") }</span>
        </div>
        <h2 class="text-xl font-semibold mb-1">{ note.Title }</h2>
      </div>
      <div class="px-4 pb-4">
        <div class="pb-4">
          <h3 class="font-semibold text-lg flex items-center mb-2 pb-1 border-b">
            <span class="size-6 mr-1 text-primary">
              @icons.Tags()
            </span>
            Tags
          </h3>
          <div class="flex gap-1 flex-wrap">
            if len(note.Tags) > 0 {
            for _, tag := range note.Tags {
            <span class="inline-block bg-primary text-xs font-semibold px-2 py-1 rounded">
              { tag.Name }
            </span>
            }
            } else {
            <span class="inline-block text-[0.8rem] font-semibold">
              Note has no tags
            </span>
            }
          </div>
        </div>
        <div class="">
          <h3 class="font-semibold flex items-center mb-2 pb-1 border-b">
            <span class="size-6 mr-1 text-secondary">
              @icons.Link()
            </span>
            Linked Notes
          </h3>
          <div class="flex gap-1 flex-wrap">
            if len(note.LinkedNotes) > 0 {
            for _, link := range note.LinkedNotes {
            <span class="inline-block bg-secondary text-xs font-semibold px-2 py-1 rounded">
              { link.Title }
            </span>
            }
            } else {
            <span class="inline-block text-[0.8rem] font-semibold">
              Note has no links
            </span>
            }
          </div>
        </div>
      </div>
    </div>
    }
  </div>
</div>
}
}

templ Prose() {
<div
  class="text-gray-700 dark:text-gray-300 prose prose-lg lg:prose-xl dark:prose-invert text-muted dark:prose-headings:text-heading prose-md prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:font-bold prose-a:text-primary dark:prose-a:text-primary prose-img:rounded-md prose-img:shadow-lg mt-8 prose-headings:scroll-mt-[80px] border-border">
  { children... }
</div>
}

func Unsafe(html string) templ.Component {
return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
_, err = io.WriteString(w, html)
return
})
}

func renderMarkdown(content string) string {
var buf bytes.Buffer
md := goldmark.New(
goldmark.WithExtensions(extension.GFM),
goldmark.WithRendererOptions(html.WithUnsafe()),
)
md.Convert([]byte(content), &buf)
return buf.String()
}
