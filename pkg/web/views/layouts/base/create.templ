package base

import (
	"fmt"
	"github.com/Paintersrp/zettel/pkg/web/views/components/icons"
	"github.com/Paintersrp/zettel/internal/db"
)

templ CreateModal(user db.User, vaults []db.Vault) {
	<div
		x-data
		x-init="
    $watch('$store.modal.fullscreenModal', value => {
      if(value === true){
        document.body.classList.add('overflow-hidden');
      } else {
        document.body.classList.remove('overflow-hidden');
      }
    })
  "
		@keydown.escape="$store.modal.fullscreenModal = false"
	>
		<button @click="$store.modal.fullscreenModal = true" class="btn-secondary text-primary border-none px-2 py-2 ml-2">
			<span class="size-6">
				@icons.Plus()
			</span>
		</button>
		<template x-teleport="body">
			<div
				x-show="$store.modal.fullscreenModal"
				x-transition:enter="transition ease-out duration-100"
				x-transition:enter-start="opacity-0"
				x-transition:enter-end="opacity-100"
				x-transition:leave="transition ease-in duration-100"
				x-transition:leave-start="opacity-100"
				x-transition:leave-end="opacity-0"
				class="flex fixed inset-0 z-[99] w-full h-full dark bg-page"
			>
				<div class="flex items-center justify-end h-18 mt-4 absolute top-0 right-0 z-30 container">
					<button @click="$store.modal.fullscreenModal = false" class="space-x-1 btn-secondary uppercase text-xs">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							stroke-width="1.5"
							stroke="currentColor"
							class="w-4 h-4"
						>
							<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
						<span>Close</span>
					</button>
				</div>
				<div id="js-editor" class="rounded bg-page w-full dark flex flex-col justify-center items-center">
					<h1 class="text-2xl text-primary font-bold">Create a new note</h1>
					<form id="create-note-form" class="w-screen px-16 py-4" @submit.prevent="submitForm">
						<div class="mb-4">
							<label for="note-title" class="block text-sm font-medium text-muted">Title</label>
							<input type="text" id="note-title" class="mt-1 block w-full text-black" required/>
						</div>
						<div class="mb-4">
							<label for="note-tags" class="block text-sm font-medium text-muted">Tags</label>
							<input type="text" id="note-tags" class="mt-1 block w-full text-black" placeholder="tag1, tag2"/>
						</div>
						@EditorCreate(user, vaults)
						<div class="mt-4">
							<button type="submit" class="btn-primary">Create Note</button>
						</div>
						<div class="hidden">
							<input id="note-userid" value={ string(fmt.Sprint(user.ID)) }/>
							<input id="note-vaultid" value={ string(fmt.Sprint(vaults[0].ID)) }/>
						</div>
					</form>
				</div>
			</div>
		</template>
		<link rel="stylesheet" href="/public/styles/editor.css"/>
		<link rel="stylesheet" href="/public/styles/easymde.min.css"/>
		<script src="/public/js/easymde.min.js"></script>
		<script>
    document.addEventListener('alpine:init', () => {
      Alpine.store('modal', {
        fullscreenModal: false
      });
    });
  </script>
		<style>
    .EasyMDEContainer {
      padding: 1rem 4rem 1rem 4rem;
      min-width: 100%;
    }

    .CodeMirror {
      height: 50vh !important;
    }
  </style>
	</div>
}

templ EditorCreate(user db.User, vaults []db.Vault) {
	<textarea id="editor-mde" class="dark w-full"></textarea>
	<script>
  document.addEventListener("DOMContentLoaded", function () {
    var easyMDE = new EasyMDE({
      element: document.getElementById('editor-mde'),
      toolbar: ["bold", "italic", "heading", "|", "quote", "unordered-list", "ordered-list", "|", "link", "image", "|",
        "guide"
      ],
      unorderedListStyle: "-",
    });
    easyMDE.value(``);
    easyMDE.codemirror.refresh();

    window.submitForm = function () {
      const title = document.getElementById('note-title').value;
      const userId = parseInt(document.getElementById('note-userid').value);
      const vaultId = document.getElementById('note-vaultid').value;
      const tags = document.getElementById('note-tags').value.split(',').map(tag => tag.trim());
      const content = easyMDE.value();
      const frontmatter = `---
title: ${title}
created: ${new Date().toISOString()}
tags:
${tags.map(tag => `- ${tag}`).join('\n')}
---
`;
      const noteContent = frontmatter + '\n' + content;

      const payload = {
        title: title,
        tags: tags,
        content: noteContent,
        user_id: parseInt(userId),
        vault_id: parseInt(vaultId),
      };

      console.log("here", payload)

      fetch('http://localhost:6474/v1/api/notes/remote', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      })
        .then(response => response.json())
        .then(data => {
          console.log('Success:', data);
          // Handle success, close the modal, etc.
          document.body.classList.remove('overflow-hidden');
          Alpine.store('modal').fullscreenModal = false;
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    }
  });
</script>
}
