// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: vaults.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVault = `-- name: CreateVault :one
INSERT INTO vaults (name, user_id)
VALUES ($1, $2)
RETURNING id, name, user_id, created_at, updated_at
`

type CreateVaultParams struct {
	Name   string
	UserID pgtype.Int4
}

func (q *Queries) CreateVault(ctx context.Context, arg CreateVaultParams) (Vault, error) {
	row := q.db.QueryRow(ctx, createVault, arg.Name, arg.UserID)
	var i Vault
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVault = `-- name: DeleteVault :exec
DELETE FROM vaults
WHERE id = $1
`

func (q *Queries) DeleteVault(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteVault, id)
	return err
}

const getVault = `-- name: GetVault :one
SELECT id, name, user_id, created_at, updated_at
FROM vaults
WHERE id = $1
`

func (q *Queries) GetVault(ctx context.Context, id int32) (Vault, error) {
	row := q.db.QueryRow(ctx, getVault, id)
	var i Vault
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVaultsByUser = `-- name: GetVaultsByUser :many
SELECT id, name, user_id, created_at, updated_at
FROM vaults
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetVaultsByUser(ctx context.Context, userID pgtype.Int4) ([]Vault, error) {
	rows, err := q.db.Query(ctx, getVaultsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vault
	for rows.Next() {
		var i Vault
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVault = `-- name: UpdateVault :one
UPDATE vaults
SET name = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, user_id, created_at, updated_at
`

type UpdateVaultParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateVault(ctx context.Context, arg UpdateVaultParams) (Vault, error) {
	row := q.db.QueryRow(ctx, updateVault, arg.ID, arg.Name)
	var i Vault
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
