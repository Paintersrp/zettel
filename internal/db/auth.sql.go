// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: auth.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreatePermission(ctx context.Context, name UserRolePermissions) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission, name)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateRole(ctx context.Context, name UserRole) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, hashed_password, email, role_id)
VALUES ($1, $2, $3, $4)
RETURNING id, username, hashed_password, email, role_id, created_at, updated_at
`

type CreateUserParams struct {
	Username       string
	HashedPassword string
	Email          string
	RoleID         pgtype.Int4
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions
WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePermission, id)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getPermission = `-- name: GetPermission :one
SELECT id, name
FROM permissions
WHERE id = $1
`

func (q *Queries) GetPermission(ctx context.Context, id int32) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermission, id)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPermissions = `-- name: GetPermissions :many
SELECT id, name
FROM permissions
`

func (q *Queries) GetPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRole = `-- name: GetRole :one
SELECT r.id, r.name, array_agg(p.name) AS permissions
FROM roles r
JOIN role_permissions rp ON r.id = rp.role_id
JOIN permissions p ON rp.permission_id = p.id
WHERE r.id = $1
GROUP BY r.id
`

type GetRoleRow struct {
	ID          int32
	Name        UserRole
	Permissions interface{}
}

func (q *Queries) GetRole(ctx context.Context, id int32) (GetRoleRow, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i GetRoleRow
	err := row.Scan(&i.ID, &i.Name, &i.Permissions)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT r.id, r.name, array_agg(p.name) AS permissions
FROM roles r
JOIN role_permissions rp ON r.id = rp.role_id
JOIN permissions p ON rp.permission_id = p.id
GROUP BY r.id
`

type GetRolesRow struct {
	ID          int32
	Name        UserRole
	Permissions interface{}
}

func (q *Queries) GetRoles(ctx context.Context) ([]GetRolesRow, error) {
	rows, err := q.db.Query(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolesRow
	for rows.Next() {
		var i GetRolesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Permissions); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT u.id, u.username, u.hashed_password, u.email, u.role_id, u.created_at, u.updated_at, r.name AS role_name
FROM users u
JOIN roles r ON u.role_id = r.id
WHERE u.id = $1
`

type GetUserRow struct {
	ID             int32
	Username       string
	HashedPassword string
	Email          string
	RoleID         pgtype.Int4
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
	RoleName       UserRole
}

func (q *Queries) GetUser(ctx context.Context, id int32) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleName,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, hashed_password, email, role_id, created_at, updated_at FROM users 
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT u.id, u.username, u.hashed_password, u.email, u.role_id, u.created_at, u.updated_at, r.name AS role_name
FROM users u
JOIN roles r ON u.role_id = r.id
ORDER BY u.created_at DESC
`

type GetUsersRow struct {
	ID             int32
	Username       string
	HashedPassword string
	Email          string
	RoleID         pgtype.Int4
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
	RoleName       UserRole
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.RoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE permissions
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdatePermissionParams struct {
	ID   int32
	Name UserRolePermissions
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, updatePermission, arg.ID, arg.Name)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateRoleParams struct {
	ID   int32
	Name UserRole
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.ID, arg.Name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2, hashed_password = $3, email = $4, role_id = $5
WHERE id = $1
RETURNING id, username, hashed_password, email, role_id, created_at, updated_at
`

type UpdateUserParams struct {
	ID             int32
	Username       string
	HashedPassword string
	Email          string
	RoleID         pgtype.Int4
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
