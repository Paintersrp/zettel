// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: auth.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, hashed_password, email, role_id)
VALUES ($1, $2, $3, $4)
RETURNING id, username, hashed_password, email, role_id, created_at, updated_at
`

type CreateUserParams struct {
	Username       string      `json:"username"`
	HashedPassword string      `json:"hashed_password"`
	Email          string      `json:"email"`
	RoleID         pgtype.Int4 `json:"role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT u.id, u.username, u.hashed_password, u.email, u.role_id, u.created_at, u.updated_at, r.name AS role_name
FROM users u
JOIN roles r ON u.role_id = r.id
WHERE u.id = $1
`

type GetUserRow struct {
	ID             int32              `json:"id"`
	Username       string             `json:"username"`
	HashedPassword string             `json:"hashed_password"`
	Email          string             `json:"email"`
	RoleID         pgtype.Int4        `json:"role_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	RoleName       UserRole           `json:"role_name"`
}

func (q *Queries) GetUser(ctx context.Context, id int32) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleName,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, hashed_password, email, role_id, created_at, updated_at FROM users 
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserWithVaults = `-- name: GetUserWithVaults :one
SELECT u.id, u.username, u.email, r.name AS role_name, COALESCE(json_agg(v.* ORDER BY v.created_at DESC) FILTER (WHERE v.id IS NOT NULL), '[]') AS vaults
FROM users u
JOIN roles r ON u.role_id = r.id
LEFT JOIN vaults v ON u.id = v.user_id
WHERE u.id = $1
GROUP BY u.id, r.name
`

type GetUserWithVaultsRow struct {
	ID       int32       `json:"id"`
	Username string      `json:"username"`
	Email    string      `json:"email"`
	RoleName UserRole    `json:"role_name"`
	Vaults   interface{} `json:"vaults"`
}

func (q *Queries) GetUserWithVaults(ctx context.Context, id int32) (GetUserWithVaultsRow, error) {
	row := q.db.QueryRow(ctx, getUserWithVaults, id)
	var i GetUserWithVaultsRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.RoleName,
		&i.Vaults,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT u.id, u.username, u.hashed_password, u.email, u.role_id, u.created_at, u.updated_at, r.name AS role_name
FROM users u
JOIN roles r ON u.role_id = r.id
ORDER BY u.created_at DESC
`

type GetUsersRow struct {
	ID             int32              `json:"id"`
	Username       string             `json:"username"`
	HashedPassword string             `json:"hashed_password"`
	Email          string             `json:"email"`
	RoleID         pgtype.Int4        `json:"role_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	RoleName       UserRole           `json:"role_name"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.RoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2, hashed_password = $3, email = $4, role_id = $5
WHERE id = $1
RETURNING id, username, hashed_password, email, role_id, created_at, updated_at
`

type UpdateUserParams struct {
	ID             int32       `json:"id"`
	Username       string      `json:"username"`
	HashedPassword string      `json:"hashed_password"`
	Email          string      `json:"email"`
	RoleID         pgtype.Int4 `json:"role_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
