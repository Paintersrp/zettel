// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: remote.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRemoteChange = `-- name: CreateRemoteChange :one
INSERT INTO remote_changes (user_id, note_id, action, title, content)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, note_id, action, title, content, created_at, processed
`

type CreateRemoteChangeParams struct {
	UserID  int32       `json:"user_id"`
	NoteID  pgtype.Int4 `json:"note_id"`
	Action  string      `json:"action"`
	Title   pgtype.Text `json:"title"`
	Content pgtype.Text `json:"content"`
}

func (q *Queries) CreateRemoteChange(ctx context.Context, arg CreateRemoteChangeParams) (RemoteChange, error) {
	row := q.db.QueryRow(ctx, createRemoteChange,
		arg.UserID,
		arg.NoteID,
		arg.Action,
		arg.Title,
		arg.Content,
	)
	var i RemoteChange
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NoteID,
		&i.Action,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.Processed,
	)
	return i, err
}

const createRemoteLinkChange = `-- name: CreateRemoteLinkChange :one
INSERT INTO remote_link_changes (user_id, note_id, linked_note_id, action)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, note_id, linked_note_id, action, created_at, processed
`

type CreateRemoteLinkChangeParams struct {
	UserID       int32       `json:"user_id"`
	NoteID       int32       `json:"note_id"`
	LinkedNoteID pgtype.Int4 `json:"linked_note_id"`
	Action       string      `json:"action"`
}

func (q *Queries) CreateRemoteLinkChange(ctx context.Context, arg CreateRemoteLinkChangeParams) (RemoteLinkChange, error) {
	row := q.db.QueryRow(ctx, createRemoteLinkChange,
		arg.UserID,
		arg.NoteID,
		arg.LinkedNoteID,
		arg.Action,
	)
	var i RemoteLinkChange
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NoteID,
		&i.LinkedNoteID,
		&i.Action,
		&i.CreatedAt,
		&i.Processed,
	)
	return i, err
}

const createRemoteTagChange = `-- name: CreateRemoteTagChange :one
INSERT INTO remote_tag_changes (user_id, note_id, tag_id, action)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, note_id, tag_id, action, created_at, processed
`

type CreateRemoteTagChangeParams struct {
	UserID int32       `json:"user_id"`
	NoteID int32       `json:"note_id"`
	TagID  pgtype.Int4 `json:"tag_id"`
	Action string      `json:"action"`
}

func (q *Queries) CreateRemoteTagChange(ctx context.Context, arg CreateRemoteTagChangeParams) (RemoteTagChange, error) {
	row := q.db.QueryRow(ctx, createRemoteTagChange,
		arg.UserID,
		arg.NoteID,
		arg.TagID,
		arg.Action,
	)
	var i RemoteTagChange
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NoteID,
		&i.TagID,
		&i.Action,
		&i.CreatedAt,
		&i.Processed,
	)
	return i, err
}

const getUnprocessedRemoteChanges = `-- name: GetUnprocessedRemoteChanges :many
SELECT id, user_id, note_id, action, title, content, created_at, processed FROM remote_changes
WHERE user_id = $1 AND processed = false
ORDER BY created_at
`

func (q *Queries) GetUnprocessedRemoteChanges(ctx context.Context, userID int32) ([]RemoteChange, error) {
	rows, err := q.db.Query(ctx, getUnprocessedRemoteChanges, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RemoteChange
	for rows.Next() {
		var i RemoteChange
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NoteID,
			&i.Action,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.Processed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnprocessedRemoteLinkChanges = `-- name: GetUnprocessedRemoteLinkChanges :many
SELECT id, user_id, note_id, linked_note_id, action, created_at, processed FROM remote_link_changes
WHERE user_id = $1 AND processed = false
ORDER BY created_at
`

func (q *Queries) GetUnprocessedRemoteLinkChanges(ctx context.Context, userID int32) ([]RemoteLinkChange, error) {
	rows, err := q.db.Query(ctx, getUnprocessedRemoteLinkChanges, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RemoteLinkChange
	for rows.Next() {
		var i RemoteLinkChange
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NoteID,
			&i.LinkedNoteID,
			&i.Action,
			&i.CreatedAt,
			&i.Processed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnprocessedRemoteTagChanges = `-- name: GetUnprocessedRemoteTagChanges :many
SELECT id, user_id, note_id, tag_id, action, created_at, processed FROM remote_tag_changes
WHERE user_id = $1 AND processed = false
ORDER BY created_at
`

func (q *Queries) GetUnprocessedRemoteTagChanges(ctx context.Context, userID int32) ([]RemoteTagChange, error) {
	rows, err := q.db.Query(ctx, getUnprocessedRemoteTagChanges, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RemoteTagChange
	for rows.Next() {
		var i RemoteTagChange
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NoteID,
			&i.TagID,
			&i.Action,
			&i.CreatedAt,
			&i.Processed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markRemoteChangeProcessed = `-- name: MarkRemoteChangeProcessed :exec
UPDATE remote_changes
SET processed = true
WHERE id = $1
`

func (q *Queries) MarkRemoteChangeProcessed(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markRemoteChangeProcessed, id)
	return err
}

const markRemoteLinkChangeProcessed = `-- name: MarkRemoteLinkChangeProcessed :exec
UPDATE remote_link_changes
SET processed = true
WHERE id = $1
`

func (q *Queries) MarkRemoteLinkChangeProcessed(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markRemoteLinkChangeProcessed, id)
	return err
}

const markRemoteTagChangeProcessed = `-- name: MarkRemoteTagChangeProcessed :exec
UPDATE remote_tag_changes
SET processed = true
WHERE id = $1
`

func (q *Queries) MarkRemoteTagChangeProcessed(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markRemoteTagChangeProcessed, id)
	return err
}
