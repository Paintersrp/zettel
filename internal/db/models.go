// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ActionPriority string

const (
	ActionPriorityLow    ActionPriority = "low"
	ActionPriorityMedium ActionPriority = "medium"
	ActionPriorityHigh   ActionPriority = "high"
)

func (e *ActionPriority) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ActionPriority(s)
	case string:
		*e = ActionPriority(s)
	default:
		return fmt.Errorf("unsupported scan type for ActionPriority: %T", src)
	}
	return nil
}

type NullActionPriority struct {
	ActionPriority ActionPriority `json:"action_priority"`
	Valid          bool           `json:"valid"` // Valid is true if ActionPriority is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullActionPriority) Scan(value interface{}) error {
	if value == nil {
		ns.ActionPriority, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ActionPriority.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullActionPriority) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ActionPriority), nil
}

type ActionStatus string

const (
	ActionStatusTodo       ActionStatus = "todo"
	ActionStatusInProgress ActionStatus = "in_progress"
	ActionStatusDone       ActionStatus = "done"
	ActionStatusCanceled   ActionStatus = "canceled"
)

func (e *ActionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ActionStatus(s)
	case string:
		*e = ActionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ActionStatus: %T", src)
	}
	return nil
}

type NullActionStatus struct {
	ActionStatus ActionStatus `json:"action_status"`
	Valid        bool         `json:"valid"` // Valid is true if ActionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullActionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ActionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ActionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullActionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ActionStatus), nil
}

type CollaboratorRole string

const (
	CollaboratorRoleViewer      CollaboratorRole = "viewer"
	CollaboratorRoleContributor CollaboratorRole = "contributor"
	CollaboratorRoleAdmin       CollaboratorRole = "admin"
)

func (e *CollaboratorRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CollaboratorRole(s)
	case string:
		*e = CollaboratorRole(s)
	default:
		return fmt.Errorf("unsupported scan type for CollaboratorRole: %T", src)
	}
	return nil
}

type NullCollaboratorRole struct {
	CollaboratorRole CollaboratorRole `json:"collaborator_role"`
	Valid            bool             `json:"valid"` // Valid is true if CollaboratorRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCollaboratorRole) Scan(value interface{}) error {
	if value == nil {
		ns.CollaboratorRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CollaboratorRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCollaboratorRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CollaboratorRole), nil
}

type ContentType string

const (
	ContentTypeHub   ContentType = "hub"
	ContentTypeTrail ContentType = "trail"
)

func (e *ContentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ContentType(s)
	case string:
		*e = ContentType(s)
	default:
		return fmt.Errorf("unsupported scan type for ContentType: %T", src)
	}
	return nil
}

type NullContentType struct {
	ContentType ContentType `json:"content_type"`
	Valid       bool        `json:"valid"` // Valid is true if ContentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullContentType) Scan(value interface{}) error {
	if value == nil {
		ns.ContentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ContentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullContentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ContentType), nil
}

type UserRole string

const (
	UserRoleAdmin  UserRole = "admin"
	UserRoleEditor UserRole = "editor"
	UserRoleUser   UserRole = "user"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type UserRolePermissions string

const (
	UserRolePermissionsCreate UserRolePermissions = "create"
	UserRolePermissionsRead   UserRolePermissions = "read"
	UserRolePermissionsUpdate UserRolePermissions = "update"
	UserRolePermissionsDelete UserRolePermissions = "delete"
	UserRolePermissionsUser   UserRolePermissions = "user"
)

func (e *UserRolePermissions) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRolePermissions(s)
	case string:
		*e = UserRolePermissions(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRolePermissions: %T", src)
	}
	return nil
}

type NullUserRolePermissions struct {
	UserRolePermissions UserRolePermissions `json:"user_role_permissions"`
	Valid               bool                `json:"valid"` // Valid is true if UserRolePermissions is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRolePermissions) Scan(value interface{}) error {
	if value == nil {
		ns.UserRolePermissions, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRolePermissions.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRolePermissions) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRolePermissions), nil
}

type VisibilityType string

const (
	VisibilityTypePrivate VisibilityType = "private"
	VisibilityTypeShared  VisibilityType = "shared"
	VisibilityTypePublic  VisibilityType = "public"
)

func (e *VisibilityType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VisibilityType(s)
	case string:
		*e = VisibilityType(s)
	default:
		return fmt.Errorf("unsupported scan type for VisibilityType: %T", src)
	}
	return nil
}

type NullVisibilityType struct {
	VisibilityType VisibilityType `json:"visibility_type"`
	Valid          bool           `json:"valid"` // Valid is true if VisibilityType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVisibilityType) Scan(value interface{}) error {
	if value == nil {
		ns.VisibilityType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VisibilityType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVisibilityType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VisibilityType), nil
}

type Action struct {
	ID          int32              `json:"id"`
	UserID      int32              `json:"user_id"`
	AssigneeID  int32              `json:"assignee_id"`
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	Priority    ActionPriority     `json:"priority"`
	Status      ActionStatus       `json:"status"`
	DueDate     pgtype.Date        `json:"due_date"`
	CompletedAt pgtype.Timestamptz `json:"completed_at"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type Collaborator struct {
	ID           int32              `json:"id"`
	UserID       int32              `json:"user_id"`
	ResourceType ContentType        `json:"resource_type"`
	ResourceID   int32              `json:"resource_id"`
	Role         CollaboratorRole   `json:"role"`
	InvitedAt    pgtype.Timestamptz `json:"invited_at"`
	AcceptedAt   pgtype.Timestamptz `json:"accepted_at"`
}

type Hub struct {
	ID          int32              `json:"id"`
	UserID      int32              `json:"user_id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	Visibility  VisibilityType     `json:"visibility"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type HubNote struct {
	HubID   int32              `json:"hub_id"`
	NoteID  int32              `json:"note_id"`
	AddedAt pgtype.Timestamptz `json:"added_at"`
}

type Note struct {
	ID            int32              `json:"id"`
	UserID        int32              `json:"user_id"`
	Title         string             `json:"title"`
	Content       string             `json:"content"`
	ContentVector interface{}        `json:"content_vector"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

type NoteAction struct {
	NoteID   int32 `json:"note_id"`
	ActionID int32 `json:"action_id"`
}

type NoteLink struct {
	ID           int32              `json:"id"`
	SourceNoteID pgtype.Int4        `json:"source_note_id"`
	TargetNoteID pgtype.Int4        `json:"target_note_id"`
	Description  pgtype.Text        `json:"description"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

type NoteSource struct {
	NoteID   int32 `json:"note_id"`
	SourceID int32 `json:"source_id"`
}

type NoteTag struct {
	NoteID int32 `json:"note_id"`
	TagID  int32 `json:"tag_id"`
}

type Permission struct {
	ID   int32               `json:"id"`
	Name UserRolePermissions `json:"name"`
}

type Provider struct {
	ID        int32              `json:"id"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Role struct {
	ID   int32    `json:"id"`
	Name UserRole `json:"name"`
}

type RolePermission struct {
	RoleID       int32 `json:"role_id"`
	PermissionID int32 `json:"permission_id"`
}

type Source struct {
	ID              int32              `json:"id"`
	UserID          int32              `json:"user_id"`
	Title           string             `json:"title"`
	Url             pgtype.Text        `json:"url"`
	Author          pgtype.Text        `json:"author"`
	PublicationDate pgtype.Date        `json:"publication_date"`
	Content         pgtype.Text        `json:"content"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
}

type SshKey struct {
	ID          int32              `json:"id"`
	UserID      int32              `json:"user_id"`
	PublicKey   string             `json:"public_key"`
	Name        string             `json:"name"`
	Fingerprint string             `json:"fingerprint"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type Tag struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type Trail struct {
	ID          int32              `json:"id"`
	UserID      int32              `json:"user_id"`
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	Visibility  VisibilityType     `json:"visibility"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type TrailNote struct {
	TrailID  int32 `json:"trail_id"`
	NoteID   int32 `json:"note_id"`
	Position int32 `json:"position"`
}

type User struct {
	ID                int32              `json:"id"`
	Username          string             `json:"username"`
	HashedPassword    string             `json:"hashed_password"`
	Email             string             `json:"email"`
	RoleID            pgtype.Int4        `json:"role_id"`
	VerificationID    pgtype.Int4        `json:"verification_id"`
	Bio               pgtype.Text        `json:"bio"`
	PreferredName     pgtype.Text        `json:"preferred_name"`
	Onboarding        bool               `json:"onboarding"`
	OnboardingFrom    pgtype.Text        `json:"onboarding_from"`
	CompletedTutorial bool               `json:"completed_tutorial"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	ActiveVault       pgtype.Int4        `json:"active_vault"`
}

type UserProvider struct {
	UserProviderID int32              `json:"user_provider_id"`
	UserID         int32              `json:"user_id"`
	ProviderID     int32              `json:"provider_id"`
	ProviderUserID string             `json:"provider_user_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type Verification struct {
	ID        int32              `json:"id"`
	UserID    pgtype.Int4        `json:"user_id"`
	Email     string             `json:"email"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamp   `json:"expires_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Status    string             `json:"status"`
}
