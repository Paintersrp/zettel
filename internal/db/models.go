// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserRole string

const (
	UserRoleAdmin  UserRole = "admin"
	UserRoleEditor UserRole = "editor"
	UserRoleUser   UserRole = "user"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type UserRolePermissions string

const (
	UserRolePermissionsCreate UserRolePermissions = "create"
	UserRolePermissionsRead   UserRolePermissions = "read"
	UserRolePermissionsUpdate UserRolePermissions = "update"
	UserRolePermissionsDelete UserRolePermissions = "delete"
	UserRolePermissionsUser   UserRolePermissions = "user"
)

func (e *UserRolePermissions) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRolePermissions(s)
	case string:
		*e = UserRolePermissions(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRolePermissions: %T", src)
	}
	return nil
}

type NullUserRolePermissions struct {
	UserRolePermissions UserRolePermissions `json:"user_role_permissions"`
	Valid               bool                `json:"valid"` // Valid is true if UserRolePermissions is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRolePermissions) Scan(value interface{}) error {
	if value == nil {
		ns.UserRolePermissions, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRolePermissions.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRolePermissions) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRolePermissions), nil
}

type Note struct {
	ID        int32              `json:"id"`
	Title     string             `json:"title"`
	UserID    pgtype.Int4        `json:"user_id"`
	VaultID   pgtype.Int4        `json:"vault_id"`
	Upstream  pgtype.Int4        `json:"upstream"`
	Content   string             `json:"content"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type NoteLink struct {
	NoteID       int32 `json:"note_id"`
	LinkedNoteID int32 `json:"linked_note_id"`
}

type NoteTag struct {
	NoteID int32 `json:"note_id"`
	TagID  int32 `json:"tag_id"`
}

type Permission struct {
	ID   int32               `json:"id"`
	Name UserRolePermissions `json:"name"`
}

type Provider struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type RemoteChange struct {
	ID        int32              `json:"id"`
	UserID    int32              `json:"user_id"`
	NoteID    pgtype.Int4        `json:"note_id"`
	Action    string             `json:"action"`
	Title     pgtype.Text        `json:"title"`
	Content   pgtype.Text        `json:"content"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Processed pgtype.Bool        `json:"processed"`
}

type RemoteLinkChange struct {
	ID           int32              `json:"id"`
	UserID       int32              `json:"user_id"`
	NoteID       int32              `json:"note_id"`
	LinkedNoteID pgtype.Int4        `json:"linked_note_id"`
	Action       string             `json:"action"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	Processed    pgtype.Bool        `json:"processed"`
}

type RemoteTagChange struct {
	ID        int32              `json:"id"`
	UserID    int32              `json:"user_id"`
	NoteID    int32              `json:"note_id"`
	TagID     pgtype.Int4        `json:"tag_id"`
	Action    string             `json:"action"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Processed pgtype.Bool        `json:"processed"`
}

type Role struct {
	ID   int32    `json:"id"`
	Name UserRole `json:"name"`
}

type RolePermission struct {
	RoleID       int32 `json:"role_id"`
	PermissionID int32 `json:"permission_id"`
}

type SshKey struct {
	ID          int32              `json:"id"`
	UserID      int32              `json:"user_id"`
	PublicKey   string             `json:"public_key"`
	Name        string             `json:"name"`
	Fingerprint string             `json:"fingerprint"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type Tag struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type User struct {
	ID                int32              `json:"id"`
	Username          string             `json:"username"`
	HashedPassword    string             `json:"hashed_password"`
	Email             string             `json:"email"`
	RoleID            pgtype.Int4        `json:"role_id"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	VerificationID    pgtype.UUID        `json:"verification_id"`
	Bio               pgtype.Text        `json:"bio"`
	PreferredName     pgtype.Text        `json:"preferred_name"`
	Onboarding        bool               `json:"onboarding"`
	OnboardingFrom    pgtype.Text        `json:"onboarding_from"`
	CompletedTutorial bool               `json:"completed_tutorial"`
	ActiveVault       pgtype.Int4        `json:"active_vault"`
}

type UserProvider struct {
	UserProviderID int32            `json:"user_provider_id"`
	UserID         int32            `json:"user_id"`
	ProviderID     int32            `json:"provider_id"`
	ProviderUserID string           `json:"provider_user_id"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
}

type Vault struct {
	ID          int32              `json:"id"`
	Name        string             `json:"name"`
	UserID      pgtype.Int4        `json:"user_id"`
	Commit      pgtype.Text        `json:"commit"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	Description pgtype.Text        `json:"description"`
}

type Verification struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.Int4        `json:"user_id"`
	Email     string             `json:"email"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamp   `json:"expires_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Status    string             `json:"status"`
}
