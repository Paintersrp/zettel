// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: links.sql

package db

import (
	"context"
)

const findOrCreateNoteLink = `-- name: FindOrCreateNoteLink :one
WITH ins AS (
    INSERT INTO note_links (note_id, linked_note_id)
    VALUES ($1, $2)
    ON CONFLICT DO NOTHING
    RETURNING note_id, linked_note_id
)
SELECT note_id, linked_note_id FROM ins
UNION
SELECT note_id, linked_note_id FROM note_links WHERE note_id = $1 AND linked_note_id = $2
`

type FindOrCreateNoteLinkParams struct {
	NoteID       int32 `json:"note_id"`
	LinkedNoteID int32 `json:"linked_note_id"`
}

type FindOrCreateNoteLinkRow struct {
	NoteID       int32 `json:"note_id"`
	LinkedNoteID int32 `json:"linked_note_id"`
}

func (q *Queries) FindOrCreateNoteLink(ctx context.Context, arg FindOrCreateNoteLinkParams) (FindOrCreateNoteLinkRow, error) {
	row := q.db.QueryRow(ctx, findOrCreateNoteLink, arg.NoteID, arg.LinkedNoteID)
	var i FindOrCreateNoteLinkRow
	err := row.Scan(&i.NoteID, &i.LinkedNoteID)
	return i, err
}
