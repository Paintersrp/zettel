// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ssh.sql

package db

import (
	"context"
)

const deleteSSHKey = `-- name: DeleteSSHKey :exec
DELETE FROM ssh_keys
WHERE id = $1
`

func (q *Queries) DeleteSSHKey(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSSHKey, id)
	return err
}

const getSSHKey = `-- name: GetSSHKey :one
SELECT
    id,
    user_id,
    public_key,
    name,
    fingerprint,
    created_at,
    updated_at
FROM
    ssh_keys
WHERE
    id = $1
`

func (q *Queries) GetSSHKey(ctx context.Context, id int32) (SshKey, error) {
	row := q.db.QueryRow(ctx, getSSHKey, id)
	var i SshKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PublicKey,
		&i.Name,
		&i.Fingerprint,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSSHKeys = `-- name: GetSSHKeys :many
SELECT
    k.id,
    k.user_id,
    k.public_key,
    k.name,
    k.fingerprint,
    k.created_at,
    k.updated_at
FROM
    ssh_keys k
INNER JOIN
    users u ON k.user_id = u.id
WHERE
    k.user_id = $1
`

func (q *Queries) GetSSHKeys(ctx context.Context, userID int32) ([]SshKey, error) {
	rows, err := q.db.Query(ctx, getSSHKeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SshKey
	for rows.Next() {
		var i SshKey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PublicKey,
			&i.Name,
			&i.Fingerprint,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveSSHKey = `-- name: SaveSSHKey :one
INSERT INTO ssh_keys (user_id, public_key, name, fingerprint)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, public_key, name, fingerprint, created_at, updated_at
`

type SaveSSHKeyParams struct {
	UserID      int32
	PublicKey   string
	Name        string
	Fingerprint string
}

func (q *Queries) SaveSSHKey(ctx context.Context, arg SaveSSHKeyParams) (SshKey, error) {
	row := q.db.QueryRow(ctx, saveSSHKey,
		arg.UserID,
		arg.PublicKey,
		arg.Name,
		arg.Fingerprint,
	)
	var i SshKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PublicKey,
		&i.Name,
		&i.Fingerprint,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSSHKey = `-- name: UpdateSSHKey :one
UPDATE ssh_keys
SET
    public_key = $2,
    name = $3,
    fingerprint = $4
WHERE
    id = $1
RETURNING id, user_id, public_key, name, fingerprint, created_at, updated_at
`

type UpdateSSHKeyParams struct {
	ID          int32
	PublicKey   string
	Name        string
	Fingerprint string
}

func (q *Queries) UpdateSSHKey(ctx context.Context, arg UpdateSSHKeyParams) (SshKey, error) {
	row := q.db.QueryRow(ctx, updateSSHKey,
		arg.ID,
		arg.PublicKey,
		arg.Name,
		arg.Fingerprint,
	)
	var i SshKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PublicKey,
		&i.Name,
		&i.Fingerprint,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
