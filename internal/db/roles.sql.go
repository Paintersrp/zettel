// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: roles.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateRole(ctx context.Context, name UserRole) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT r.id, r.name, array_agg(p.name) AS permissions
FROM roles r
JOIN role_permissions rp ON r.id = rp.role_id
JOIN permissions p ON rp.permission_id = p.id
WHERE r.id = $1
GROUP BY r.id
`

type GetRoleRow struct {
	ID          int32       `json:"id"`
	Name        UserRole    `json:"name"`
	Permissions interface{} `json:"permissions"`
}

func (q *Queries) GetRole(ctx context.Context, id int32) (GetRoleRow, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i GetRoleRow
	err := row.Scan(&i.ID, &i.Name, &i.Permissions)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT r.id, r.name, array_agg(p.name) AS permissions
FROM roles r
JOIN role_permissions rp ON r.id = rp.role_id
JOIN permissions p ON rp.permission_id = p.id
GROUP BY r.id
`

type GetRolesRow struct {
	ID          int32       `json:"id"`
	Name        UserRole    `json:"name"`
	Permissions interface{} `json:"permissions"`
}

func (q *Queries) GetRoles(ctx context.Context) ([]GetRolesRow, error) {
	rows, err := q.db.Query(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolesRow
	for rows.Next() {
		var i GetRolesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Permissions); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateRoleParams struct {
	ID   int32    `json:"id"`
	Name UserRole `json:"name"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.ID, arg.Name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
