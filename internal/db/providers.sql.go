// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: providers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProviderForUser = `-- name: AddProviderForUser :exec
INSERT INTO user_providers (user_id, provider_id, provider_user_id)
VALUES (
    (SELECT id FROM users WHERE email = $1),
    (SELECT id FROM providers WHERE name = $2),
    $3
)
`

type AddProviderForUserParams struct {
	Email          string `json:"email"`
	Name           string `json:"name"`
	ProviderUserID string `json:"provider_user_id"`
}

func (q *Queries) AddProviderForUser(ctx context.Context, arg AddProviderForUserParams) error {
	_, err := q.db.Exec(ctx, addProviderForUser, arg.Email, arg.Name, arg.ProviderUserID)
	return err
}

const getProvidersForUser = `-- name: GetProvidersForUser :many
SELECT p.name, up.provider_user_id
FROM user_providers up
JOIN providers p ON up.provider_id = p.provider_id
WHERE up.user_id = (SELECT user_id FROM users WHERE email = $1)
`

type GetProvidersForUserRow struct {
	Name           string `json:"name"`
	ProviderUserID string `json:"provider_user_id"`
}

func (q *Queries) GetProvidersForUser(ctx context.Context, email string) ([]GetProvidersForUserRow, error) {
	rows, err := q.db.Query(ctx, getProvidersForUser, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProvidersForUserRow
	for rows.Next() {
		var i GetProvidersForUserRow
		if err := rows.Scan(&i.Name, &i.ProviderUserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByProvider = `-- name: GetUserByProvider :one
SELECT
    u.id, u.username, u.hashed_password, u.email, u.role_id, u.verification_id, u.bio, u.preferred_name, u.onboarding, u.onboarding_from, u.completed_tutorial, u.created_at, u.updated_at, u.active_vault,
    v.token AS verification_token,
    v.expires_at AS verification_expires_at,
    v.created_at AS verification_created_at,
    v.updated_at AS verification_updated_at,
    v.status AS verification_status,
    v.email AS verification_email
FROM
    users u
JOIN
    user_providers up ON u.id = up.user_id
JOIN
    providers p ON up.provider_id = p.id
LEFT JOIN
    verifications v ON u.verification_id = v.id
WHERE
    p.name = $1 AND up.provider_user_id = $2
`

type GetUserByProviderParams struct {
	Name           string `json:"name"`
	ProviderUserID string `json:"provider_user_id"`
}

type GetUserByProviderRow struct {
	ID                    int32              `json:"id"`
	Username              string             `json:"username"`
	HashedPassword        string             `json:"hashed_password"`
	Email                 string             `json:"email"`
	RoleID                pgtype.Int4        `json:"role_id"`
	VerificationID        pgtype.Int4        `json:"verification_id"`
	Bio                   pgtype.Text        `json:"bio"`
	PreferredName         pgtype.Text        `json:"preferred_name"`
	Onboarding            bool               `json:"onboarding"`
	OnboardingFrom        pgtype.Text        `json:"onboarding_from"`
	CompletedTutorial     bool               `json:"completed_tutorial"`
	CreatedAt             pgtype.Timestamptz `json:"created_at"`
	UpdatedAt             pgtype.Timestamptz `json:"updated_at"`
	ActiveVault           pgtype.Int4        `json:"active_vault"`
	VerificationToken     pgtype.Text        `json:"verification_token"`
	VerificationExpiresAt pgtype.Timestamp   `json:"verification_expires_at"`
	VerificationCreatedAt pgtype.Timestamptz `json:"verification_created_at"`
	VerificationUpdatedAt pgtype.Timestamptz `json:"verification_updated_at"`
	VerificationStatus    pgtype.Text        `json:"verification_status"`
	VerificationEmail     pgtype.Text        `json:"verification_email"`
}

func (q *Queries) GetUserByProvider(ctx context.Context, arg GetUserByProviderParams) (GetUserByProviderRow, error) {
	row := q.db.QueryRow(ctx, getUserByProvider, arg.Name, arg.ProviderUserID)
	var i GetUserByProviderRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.RoleID,
		&i.VerificationID,
		&i.Bio,
		&i.PreferredName,
		&i.Onboarding,
		&i.OnboardingFrom,
		&i.CompletedTutorial,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ActiveVault,
		&i.VerificationToken,
		&i.VerificationExpiresAt,
		&i.VerificationCreatedAt,
		&i.VerificationUpdatedAt,
		&i.VerificationStatus,
		&i.VerificationEmail,
	)
	return i, err
}
